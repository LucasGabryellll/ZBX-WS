generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id Int @id @default(autoincrement())

  description String @db.VarChar() @unique()
  
  count_users Int @db.Integer()
  count_sessions Int @db.Integer()
  count_shedule Int @db.Integer()

  @@index([id], name: "idx_plan_id")
  @@map("plans")
}

model Organization {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String  @db.VarChar()
  cnpj        String  @db.Char(14)
  is_active   Boolean @default(true)

  users    User[]
  reports  Report[]
  schedule Shedule[]

  sessions Session[]

  @@index([id], name: "idx_organization_id")
  @@map("organizations")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String  @db.VarChar(120)
  email     String  @unique @db.VarChar(255)
  login     String  @unique @db.VarChar(255)
  password  String  @db.VarChar(255)
  is_active Boolean @default(true)

  passwordResetToken   String?   @default("")
  passwordResetExpires DateTime?

  organization_id Int
  Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  shedules Shedule[]

  @@index([id], name: "idx_user_id")
  @@index([email], name: "idx_user_email")
  @@index([login], name: "idx_user_login")

  @@map("users")
}

model Chat {
  id Int @id @default(autoincrement())

  chat_id   String  @unique @db.VarChar(255)
  chat_name String  @db.VarChar()
  server    String  @db.Char(4)
  is_active Boolean @default(true)

  report  Report[]
  Shedule Shedule[]

  @@index([id], map: "idx_chat_id")
  @@map("chats")
}

model Session {
  id Int @id @default(autoincrement())

  session        String        @db.VarChar()
  qr             String?        @db.VarChar()
  is_connect     Boolean       @default(false)

  organization_id Int
  Organization   Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_session_id")
  @@map("sessions")
}

model Shedule {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hour      Int @db.Integer()
  minute    Int @db.Integer()
  dayOfWeek Int @db.Integer()

  is_active Boolean @default(true)

  organization_id Int
  Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  chat_id Int
  Chat    Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id Int
  User    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_shedule_id")
  @@map("shedules")
}

model Report {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String @db.VarChar()

  achive_type    String @db.VarChar()
  arquive_name   String @db.VarChar()
  arquive_locate String @db.VarChar()

  chat_id Int
  Chat    Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organization_id Int
  Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "idx_report_id")
  @@map("reports")
}

model ScheduleTrigger {
  id Int @id @default(autoincrement())

  cronExpression Int @default(40)
  
  @@index([id], name: "idx_schedule_trigger_id")
  @@map("schedule_triggers")
}